import {
  objectToQueryString,
  arrayValuesToMinMaxObjectProperties
} from 'utils';
import {
  getToken,
  getUserId,
  getTastesTracksIDs,
  getRecommendationsRefinements,
  getRecommendedTracksURIs,
  getPlaylistID,
  isPlaylistPublic
} from 'selectors';
import { getRecommendations } from 'actions/recommendations';
import {
  createPlaylist as generatePlaylist,
  addTrackToPlaylist,
  getPlaylistImages
} from 'actions/playlist';

const createPlaylist = () => (dispatch, getState) => {
  const token = getToken(getState());
  const userId = getUserId(getState());
  const tastesTracksIDs = getTastesTracksIDs(getState()).join(',');
  const refinementsObj = getRecommendationsRefinements(getState());
  const refinements = objectToQueryString(
    arrayValuesToMinMaxObjectProperties(refinementsObj)
  );
  const playListTime = new Date().toLocaleString('en-US', {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
    hour: 'numeric',
    minute: 'numeric'
  });
  const playListName = `ðŸŽ§ NONAGON Playlist ${playListTime}`;
  const playListDescription = 'My top tracks playlist generated by NONAGON';
  const isPublic = isPlaylistPublic(getState());

  dispatch(getRecommendations(token, tastesTracksIDs, refinements))
    .then(() =>
      dispatch(
        generatePlaylist(
          token,
          userId,
          playListName,
          playListDescription,
          isPublic
        )
      )
    )
    .then(() =>
      dispatch(
        addTrackToPlaylist(
          token,
          getPlaylistID(getState()),
          getRecommendedTracksURIs(getState())
        )
      )
    )
    .then(() => dispatch(getPlaylistImages(token, getPlaylistID(getState()))))
    .catch(error => console.error(error));
};

export default createPlaylist;
